#forces : A fast customized optimization solver.
#
#Copyright (C) 2013-2016 EMBOTECH GMBH [info@embotech.com]. All rights reserved.
#
#
#This software is intended for simulation and testing purposes only. 
#Use of this software for any commercial purpose is prohibited.
#
#This program is distributed in the hope that it will be useful.
#EMBOTECH makes NO WARRANTIES with respect to the use of the software 
#without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
#PARTICULAR PURPOSE. 
#
#EMBOTECH shall not have any liability for any damage arising from the use
#of the software.
#
#This Agreement shall exclusively be governed by and interpreted in 
#accordance with the laws of Switzerland, excluding its principles
#of conflict of laws. The Courts of Zurich-City shall have exclusive 
#jurisdiction in case of any dispute.
#
#def __init__():
'''
a Python wrapper for a fast solver generated by FORCES Pro

   OUTPUT = forces_py.forces_solve(PARAMS) solves a multistage problem
   subject to the parameters supplied in the following dictionary:
       PARAMS['H1'] - matrix of size [8 x 8]
       PARAMS['f1'] - column vector of length 8
       PARAMS['lb1'] - column vector of length 8
       PARAMS['ub1'] - column vector of length 8
       PARAMS['C1'] - matrix of size [6 x 8]
       PARAMS['d1'] - column vector of length 6
       PARAMS['H2'] - matrix of size [8 x 8]
       PARAMS['f2'] - column vector of length 8
       PARAMS['lb2'] - column vector of length 8
       PARAMS['ub2'] - column vector of length 8
       PARAMS['C2'] - matrix of size [6 x 8]
       PARAMS['d2'] - column vector of length 6
       PARAMS['H3'] - matrix of size [8 x 8]
       PARAMS['f3'] - column vector of length 8
       PARAMS['lb3'] - column vector of length 8
       PARAMS['ub3'] - column vector of length 8
       PARAMS['C3'] - matrix of size [6 x 8]
       PARAMS['d3'] - column vector of length 6
       PARAMS['H4'] - matrix of size [8 x 8]
       PARAMS['f4'] - column vector of length 8
       PARAMS['lb4'] - column vector of length 8
       PARAMS['ub4'] - column vector of length 8
       PARAMS['C4'] - matrix of size [6 x 8]
       PARAMS['d4'] - column vector of length 6
       PARAMS['H5'] - matrix of size [8 x 8]
       PARAMS['f5'] - column vector of length 8
       PARAMS['lb5'] - column vector of length 8
       PARAMS['ub5'] - column vector of length 8
       PARAMS['C5'] - matrix of size [6 x 8]
       PARAMS['d5'] - column vector of length 6
       PARAMS['H6'] - matrix of size [8 x 8]
       PARAMS['f6'] - column vector of length 8
       PARAMS['lb6'] - column vector of length 8
       PARAMS['ub6'] - column vector of length 8
       PARAMS['C6'] - matrix of size [6 x 8]
       PARAMS['d6'] - column vector of length 6
       PARAMS['H7'] - matrix of size [8 x 8]
       PARAMS['f7'] - column vector of length 8
       PARAMS['lb7'] - column vector of length 8
       PARAMS['ub7'] - column vector of length 8
       PARAMS['C7'] - matrix of size [6 x 8]
       PARAMS['d7'] - column vector of length 6
       PARAMS['H8'] - matrix of size [8 x 8]
       PARAMS['f8'] - column vector of length 8
       PARAMS['lb8'] - column vector of length 8
       PARAMS['ub8'] - column vector of length 8
       PARAMS['C8'] - matrix of size [6 x 8]
       PARAMS['d8'] - column vector of length 6
       PARAMS['H9'] - matrix of size [8 x 8]
       PARAMS['f9'] - column vector of length 8
       PARAMS['lb9'] - column vector of length 8
       PARAMS['ub9'] - column vector of length 8
       PARAMS['C9'] - matrix of size [6 x 8]
       PARAMS['d9'] - column vector of length 6
       PARAMS['H10'] - matrix of size [8 x 8]
       PARAMS['f10'] - column vector of length 8
       PARAMS['lb10'] - column vector of length 8
       PARAMS['ub10'] - column vector of length 8
       PARAMS['C10'] - matrix of size [6 x 8]
       PARAMS['d10'] - column vector of length 6
       PARAMS['H11'] - matrix of size [8 x 8]
       PARAMS['f11'] - column vector of length 8
       PARAMS['lb11'] - column vector of length 8
       PARAMS['ub11'] - column vector of length 8
       PARAMS['C11'] - matrix of size [6 x 8]
       PARAMS['d11'] - column vector of length 6
       PARAMS['H12'] - matrix of size [8 x 8]
       PARAMS['f12'] - column vector of length 8
       PARAMS['lb12'] - column vector of length 8
       PARAMS['ub12'] - column vector of length 8
       PARAMS['C12'] - matrix of size [6 x 8]
       PARAMS['d12'] - column vector of length 6
       PARAMS['H13'] - matrix of size [8 x 8]
       PARAMS['f13'] - column vector of length 8
       PARAMS['lb13'] - column vector of length 8
       PARAMS['ub13'] - column vector of length 8
       PARAMS['C13'] - matrix of size [6 x 8]
       PARAMS['d13'] - column vector of length 6
       PARAMS['H14'] - matrix of size [8 x 8]
       PARAMS['f14'] - column vector of length 8
       PARAMS['lb14'] - column vector of length 8
       PARAMS['ub14'] - column vector of length 8
       PARAMS['C14'] - matrix of size [6 x 8]
       PARAMS['d14'] - column vector of length 6
       PARAMS['H15'] - matrix of size [8 x 8]
       PARAMS['f15'] - column vector of length 8
       PARAMS['lb15'] - column vector of length 8
       PARAMS['ub15'] - column vector of length 8
       PARAMS['C15'] - matrix of size [6 x 8]
       PARAMS['d15'] - column vector of length 6
       PARAMS['H16'] - matrix of size [8 x 8]
       PARAMS['f16'] - column vector of length 8
       PARAMS['lb16'] - column vector of length 8
       PARAMS['ub16'] - column vector of length 8
       PARAMS['C16'] - matrix of size [6 x 8]
       PARAMS['d16'] - column vector of length 6
       PARAMS['H17'] - matrix of size [8 x 8]
       PARAMS['f17'] - column vector of length 8
       PARAMS['lb17'] - column vector of length 8
       PARAMS['ub17'] - column vector of length 8
       PARAMS['C17'] - matrix of size [6 x 8]
       PARAMS['d17'] - column vector of length 6
       PARAMS['H18'] - matrix of size [8 x 8]
       PARAMS['f18'] - column vector of length 8
       PARAMS['lb18'] - column vector of length 8
       PARAMS['ub18'] - column vector of length 8
       PARAMS['C18'] - matrix of size [6 x 8]
       PARAMS['d18'] - column vector of length 6
       PARAMS['H19'] - matrix of size [8 x 8]
       PARAMS['f19'] - column vector of length 8
       PARAMS['lb19'] - column vector of length 8
       PARAMS['ub19'] - column vector of length 8
       PARAMS['C19'] - matrix of size [6 x 8]
       PARAMS['d19'] - column vector of length 6
       PARAMS['H20'] - matrix of size [8 x 8]
       PARAMS['f20'] - column vector of length 8
       PARAMS['lb20'] - column vector of length 8
       PARAMS['ub20'] - column vector of length 8
       PARAMS['C20'] - matrix of size [6 x 8]
       PARAMS['d20'] - column vector of length 6
       PARAMS['H21'] - matrix of size [6 x 6]
       PARAMS['f21'] - column vector of length 6
       PARAMS['lb21'] - column vector of length 6
       PARAMS['ub21'] - column vector of length 6
       PARAMS['d21'] - column vector of length 6
       PARAMS['z_init_00'] - column vector of length 8
       PARAMS['z_init_01'] - column vector of length 8
       PARAMS['z_init_02'] - column vector of length 8
       PARAMS['z_init_03'] - column vector of length 8
       PARAMS['z_init_04'] - column vector of length 8
       PARAMS['z_init_05'] - column vector of length 8
       PARAMS['z_init_06'] - column vector of length 8
       PARAMS['z_init_07'] - column vector of length 8
       PARAMS['z_init_08'] - column vector of length 8
       PARAMS['z_init_09'] - column vector of length 8
       PARAMS['z_init_10'] - column vector of length 8
       PARAMS['z_init_11'] - column vector of length 8
       PARAMS['z_init_12'] - column vector of length 8
       PARAMS['z_init_13'] - column vector of length 8
       PARAMS['z_init_14'] - column vector of length 8
       PARAMS['z_init_15'] - column vector of length 8
       PARAMS['z_init_16'] - column vector of length 8
       PARAMS['z_init_17'] - column vector of length 8
       PARAMS['z_init_18'] - column vector of length 8
       PARAMS['z_init_19'] - column vector of length 8
       PARAMS['z_init_20'] - column vector of length 6

   OUTPUT returns the values of the last iteration of the solver where
       OUTPUT['out1'] - column vector of size 8
       OUTPUT['out2'] - column vector of size 8
       OUTPUT['out3'] - column vector of size 8
       OUTPUT['out4'] - column vector of size 8
       OUTPUT['out5'] - column vector of size 8
       OUTPUT['out6'] - column vector of size 8
       OUTPUT['out7'] - column vector of size 8
       OUTPUT['out8'] - column vector of size 8
       OUTPUT['out9'] - column vector of size 8
       OUTPUT['out10'] - column vector of size 8
       OUTPUT['out11'] - column vector of size 8
       OUTPUT['out12'] - column vector of size 8
       OUTPUT['out13'] - column vector of size 8
       OUTPUT['out14'] - column vector of size 8
       OUTPUT['out15'] - column vector of size 8
       OUTPUT['out16'] - column vector of size 8
       OUTPUT['out17'] - column vector of size 8
       OUTPUT['out18'] - column vector of size 8
       OUTPUT['out19'] - column vector of size 8
       OUTPUT['out20'] - column vector of size 8
       OUTPUT['out21'] - column vector of size 6

   [OUTPUT, EXITFLAG] = forces_py.forces_solve(PARAMS) returns additionally
   the integer EXITFLAG indicating the state of the solution with 
       1 - Optimal solution has been found (subject to desired accuracy)
       2 - (only branch-and-bound) A feasible point has been identified for which the objective value is no more than codeoptions.mip.mipgap*100 per cent worse than the global optimum 
       0 - Timeout - maximum number of iterations reached
      -1 - (only branch-and-bound) Infeasible problem (problems solving the root relaxation to the desired accuracy)
      -2 - (only branch-and-bound) Out of memory - cannot fit branch and bound nodes into pre-allocated memory.
      -6 - NaN or INF occured during evaluation of functions and derivatives. Please check your initial guess.
      -7 - Method could not progress. Problem may be infeasible. Run FORCESdiagnostics on your problem to check for most common errors in the formulation.
     -10 - The convex solver could not proceed due to an internal error
    -100 - License error

   [OUTPUT, EXITFLAG, INFO] = forces_py.forces_solve(PARAMS) returns 
   additional information about the last iterate:
       INFO.it        - number of iterations that lead to this result
       INFO.it2opt    - number of convex solves
       INFO.res_eq    - max. equality constraint residual
       INFO.res_ineq  - max. inequality constraint residual
       INFO.pobj      - primal objective
       INFO.dobj      - dual objective
       INFO.dgap      - duality gap := pobj - dobj
       INFO.rdgap     - relative duality gap := |dgap / pobj|
       INFO.mu        - duality measure
       INFO.sigma     - centering parameter
       INFO.lsit_aff  - iterations of affine line search
       INFO.lsit_cc   - iterations of line search (combined direction)
       INFO.step_aff  - step size (affine direction)
       INFO.step_cc   - step size (centering direction)
       INFO.solvetime - Time needed for solve (wall clock time)

 See also COPYING

'''

import ctypes
import os
import numpy as np
import numpy.ctypeslib as npct
import sys

#_lib = ctypes.CDLL(os.path.join(os.getcwd(),'forces/lib/forces.so')) 
try:
	_lib = ctypes.CDLL(os.path.join(os.path.dirname(os.path.abspath(__file__)),'forces/lib/forces.so'))
	csolver = getattr(_lib,'forces_solve')
except:
	_lib = ctypes.CDLL(os.path.join(os.path.dirname(os.path.abspath(__file__)),'forces/lib/libforces.so'))
	csolver = getattr(_lib,'forces_solve')

class forces_params_ctypes(ctypes.Structure):
#	@classmethod
#	def from_param(self):
#		return self
	_fields_ = [('H1', ctypes.c_double * 64),
('f1', ctypes.c_double * 8),
('lb1', ctypes.c_double * 8),
('ub1', ctypes.c_double * 8),
('C1', ctypes.c_double * 48),
('d1', ctypes.c_double * 6),
('H2', ctypes.c_double * 64),
('f2', ctypes.c_double * 8),
('lb2', ctypes.c_double * 8),
('ub2', ctypes.c_double * 8),
('C2', ctypes.c_double * 48),
('d2', ctypes.c_double * 6),
('H3', ctypes.c_double * 64),
('f3', ctypes.c_double * 8),
('lb3', ctypes.c_double * 8),
('ub3', ctypes.c_double * 8),
('C3', ctypes.c_double * 48),
('d3', ctypes.c_double * 6),
('H4', ctypes.c_double * 64),
('f4', ctypes.c_double * 8),
('lb4', ctypes.c_double * 8),
('ub4', ctypes.c_double * 8),
('C4', ctypes.c_double * 48),
('d4', ctypes.c_double * 6),
('H5', ctypes.c_double * 64),
('f5', ctypes.c_double * 8),
('lb5', ctypes.c_double * 8),
('ub5', ctypes.c_double * 8),
('C5', ctypes.c_double * 48),
('d5', ctypes.c_double * 6),
('H6', ctypes.c_double * 64),
('f6', ctypes.c_double * 8),
('lb6', ctypes.c_double * 8),
('ub6', ctypes.c_double * 8),
('C6', ctypes.c_double * 48),
('d6', ctypes.c_double * 6),
('H7', ctypes.c_double * 64),
('f7', ctypes.c_double * 8),
('lb7', ctypes.c_double * 8),
('ub7', ctypes.c_double * 8),
('C7', ctypes.c_double * 48),
('d7', ctypes.c_double * 6),
('H8', ctypes.c_double * 64),
('f8', ctypes.c_double * 8),
('lb8', ctypes.c_double * 8),
('ub8', ctypes.c_double * 8),
('C8', ctypes.c_double * 48),
('d8', ctypes.c_double * 6),
('H9', ctypes.c_double * 64),
('f9', ctypes.c_double * 8),
('lb9', ctypes.c_double * 8),
('ub9', ctypes.c_double * 8),
('C9', ctypes.c_double * 48),
('d9', ctypes.c_double * 6),
('H10', ctypes.c_double * 64),
('f10', ctypes.c_double * 8),
('lb10', ctypes.c_double * 8),
('ub10', ctypes.c_double * 8),
('C10', ctypes.c_double * 48),
('d10', ctypes.c_double * 6),
('H11', ctypes.c_double * 64),
('f11', ctypes.c_double * 8),
('lb11', ctypes.c_double * 8),
('ub11', ctypes.c_double * 8),
('C11', ctypes.c_double * 48),
('d11', ctypes.c_double * 6),
('H12', ctypes.c_double * 64),
('f12', ctypes.c_double * 8),
('lb12', ctypes.c_double * 8),
('ub12', ctypes.c_double * 8),
('C12', ctypes.c_double * 48),
('d12', ctypes.c_double * 6),
('H13', ctypes.c_double * 64),
('f13', ctypes.c_double * 8),
('lb13', ctypes.c_double * 8),
('ub13', ctypes.c_double * 8),
('C13', ctypes.c_double * 48),
('d13', ctypes.c_double * 6),
('H14', ctypes.c_double * 64),
('f14', ctypes.c_double * 8),
('lb14', ctypes.c_double * 8),
('ub14', ctypes.c_double * 8),
('C14', ctypes.c_double * 48),
('d14', ctypes.c_double * 6),
('H15', ctypes.c_double * 64),
('f15', ctypes.c_double * 8),
('lb15', ctypes.c_double * 8),
('ub15', ctypes.c_double * 8),
('C15', ctypes.c_double * 48),
('d15', ctypes.c_double * 6),
('H16', ctypes.c_double * 64),
('f16', ctypes.c_double * 8),
('lb16', ctypes.c_double * 8),
('ub16', ctypes.c_double * 8),
('C16', ctypes.c_double * 48),
('d16', ctypes.c_double * 6),
('H17', ctypes.c_double * 64),
('f17', ctypes.c_double * 8),
('lb17', ctypes.c_double * 8),
('ub17', ctypes.c_double * 8),
('C17', ctypes.c_double * 48),
('d17', ctypes.c_double * 6),
('H18', ctypes.c_double * 64),
('f18', ctypes.c_double * 8),
('lb18', ctypes.c_double * 8),
('ub18', ctypes.c_double * 8),
('C18', ctypes.c_double * 48),
('d18', ctypes.c_double * 6),
('H19', ctypes.c_double * 64),
('f19', ctypes.c_double * 8),
('lb19', ctypes.c_double * 8),
('ub19', ctypes.c_double * 8),
('C19', ctypes.c_double * 48),
('d19', ctypes.c_double * 6),
('H20', ctypes.c_double * 64),
('f20', ctypes.c_double * 8),
('lb20', ctypes.c_double * 8),
('ub20', ctypes.c_double * 8),
('C20', ctypes.c_double * 48),
('d20', ctypes.c_double * 6),
('H21', ctypes.c_double * 36),
('f21', ctypes.c_double * 6),
('lb21', ctypes.c_double * 6),
('ub21', ctypes.c_double * 6),
('d21', ctypes.c_double * 6),
('z_init_00', ctypes.c_double * 8),
('z_init_01', ctypes.c_double * 8),
('z_init_02', ctypes.c_double * 8),
('z_init_03', ctypes.c_double * 8),
('z_init_04', ctypes.c_double * 8),
('z_init_05', ctypes.c_double * 8),
('z_init_06', ctypes.c_double * 8),
('z_init_07', ctypes.c_double * 8),
('z_init_08', ctypes.c_double * 8),
('z_init_09', ctypes.c_double * 8),
('z_init_10', ctypes.c_double * 8),
('z_init_11', ctypes.c_double * 8),
('z_init_12', ctypes.c_double * 8),
('z_init_13', ctypes.c_double * 8),
('z_init_14', ctypes.c_double * 8),
('z_init_15', ctypes.c_double * 8),
('z_init_16', ctypes.c_double * 8),
('z_init_17', ctypes.c_double * 8),
('z_init_18', ctypes.c_double * 8),
('z_init_19', ctypes.c_double * 8),
('z_init_20', ctypes.c_double * 6),
]

forces_params = {'H1' : np.array([]),
'f1' : np.array([]),
'lb1' : np.array([]),
'ub1' : np.array([]),
'C1' : np.array([]),
'd1' : np.array([]),
'H2' : np.array([]),
'f2' : np.array([]),
'lb2' : np.array([]),
'ub2' : np.array([]),
'C2' : np.array([]),
'd2' : np.array([]),
'H3' : np.array([]),
'f3' : np.array([]),
'lb3' : np.array([]),
'ub3' : np.array([]),
'C3' : np.array([]),
'd3' : np.array([]),
'H4' : np.array([]),
'f4' : np.array([]),
'lb4' : np.array([]),
'ub4' : np.array([]),
'C4' : np.array([]),
'd4' : np.array([]),
'H5' : np.array([]),
'f5' : np.array([]),
'lb5' : np.array([]),
'ub5' : np.array([]),
'C5' : np.array([]),
'd5' : np.array([]),
'H6' : np.array([]),
'f6' : np.array([]),
'lb6' : np.array([]),
'ub6' : np.array([]),
'C6' : np.array([]),
'd6' : np.array([]),
'H7' : np.array([]),
'f7' : np.array([]),
'lb7' : np.array([]),
'ub7' : np.array([]),
'C7' : np.array([]),
'd7' : np.array([]),
'H8' : np.array([]),
'f8' : np.array([]),
'lb8' : np.array([]),
'ub8' : np.array([]),
'C8' : np.array([]),
'd8' : np.array([]),
'H9' : np.array([]),
'f9' : np.array([]),
'lb9' : np.array([]),
'ub9' : np.array([]),
'C9' : np.array([]),
'd9' : np.array([]),
'H10' : np.array([]),
'f10' : np.array([]),
'lb10' : np.array([]),
'ub10' : np.array([]),
'C10' : np.array([]),
'd10' : np.array([]),
'H11' : np.array([]),
'f11' : np.array([]),
'lb11' : np.array([]),
'ub11' : np.array([]),
'C11' : np.array([]),
'd11' : np.array([]),
'H12' : np.array([]),
'f12' : np.array([]),
'lb12' : np.array([]),
'ub12' : np.array([]),
'C12' : np.array([]),
'd12' : np.array([]),
'H13' : np.array([]),
'f13' : np.array([]),
'lb13' : np.array([]),
'ub13' : np.array([]),
'C13' : np.array([]),
'd13' : np.array([]),
'H14' : np.array([]),
'f14' : np.array([]),
'lb14' : np.array([]),
'ub14' : np.array([]),
'C14' : np.array([]),
'd14' : np.array([]),
'H15' : np.array([]),
'f15' : np.array([]),
'lb15' : np.array([]),
'ub15' : np.array([]),
'C15' : np.array([]),
'd15' : np.array([]),
'H16' : np.array([]),
'f16' : np.array([]),
'lb16' : np.array([]),
'ub16' : np.array([]),
'C16' : np.array([]),
'd16' : np.array([]),
'H17' : np.array([]),
'f17' : np.array([]),
'lb17' : np.array([]),
'ub17' : np.array([]),
'C17' : np.array([]),
'd17' : np.array([]),
'H18' : np.array([]),
'f18' : np.array([]),
'lb18' : np.array([]),
'ub18' : np.array([]),
'C18' : np.array([]),
'd18' : np.array([]),
'H19' : np.array([]),
'f19' : np.array([]),
'lb19' : np.array([]),
'ub19' : np.array([]),
'C19' : np.array([]),
'd19' : np.array([]),
'H20' : np.array([]),
'f20' : np.array([]),
'lb20' : np.array([]),
'ub20' : np.array([]),
'C20' : np.array([]),
'd20' : np.array([]),
'H21' : np.array([]),
'f21' : np.array([]),
'lb21' : np.array([]),
'ub21' : np.array([]),
'd21' : np.array([]),
'z_init_00' : np.array([]),
'z_init_01' : np.array([]),
'z_init_02' : np.array([]),
'z_init_03' : np.array([]),
'z_init_04' : np.array([]),
'z_init_05' : np.array([]),
'z_init_06' : np.array([]),
'z_init_07' : np.array([]),
'z_init_08' : np.array([]),
'z_init_09' : np.array([]),
'z_init_10' : np.array([]),
'z_init_11' : np.array([]),
'z_init_12' : np.array([]),
'z_init_13' : np.array([]),
'z_init_14' : np.array([]),
'z_init_15' : np.array([]),
'z_init_16' : np.array([]),
'z_init_17' : np.array([]),
'z_init_18' : np.array([]),
'z_init_19' : np.array([]),
'z_init_20' : np.array([]),
}
params = {'H1' : np.array([]),
'f1' : np.array([]),
'lb1' : np.array([]),
'ub1' : np.array([]),
'C1' : np.array([]),
'd1' : np.array([]),
'H2' : np.array([]),
'f2' : np.array([]),
'lb2' : np.array([]),
'ub2' : np.array([]),
'C2' : np.array([]),
'd2' : np.array([]),
'H3' : np.array([]),
'f3' : np.array([]),
'lb3' : np.array([]),
'ub3' : np.array([]),
'C3' : np.array([]),
'd3' : np.array([]),
'H4' : np.array([]),
'f4' : np.array([]),
'lb4' : np.array([]),
'ub4' : np.array([]),
'C4' : np.array([]),
'd4' : np.array([]),
'H5' : np.array([]),
'f5' : np.array([]),
'lb5' : np.array([]),
'ub5' : np.array([]),
'C5' : np.array([]),
'd5' : np.array([]),
'H6' : np.array([]),
'f6' : np.array([]),
'lb6' : np.array([]),
'ub6' : np.array([]),
'C6' : np.array([]),
'd6' : np.array([]),
'H7' : np.array([]),
'f7' : np.array([]),
'lb7' : np.array([]),
'ub7' : np.array([]),
'C7' : np.array([]),
'd7' : np.array([]),
'H8' : np.array([]),
'f8' : np.array([]),
'lb8' : np.array([]),
'ub8' : np.array([]),
'C8' : np.array([]),
'd8' : np.array([]),
'H9' : np.array([]),
'f9' : np.array([]),
'lb9' : np.array([]),
'ub9' : np.array([]),
'C9' : np.array([]),
'd9' : np.array([]),
'H10' : np.array([]),
'f10' : np.array([]),
'lb10' : np.array([]),
'ub10' : np.array([]),
'C10' : np.array([]),
'd10' : np.array([]),
'H11' : np.array([]),
'f11' : np.array([]),
'lb11' : np.array([]),
'ub11' : np.array([]),
'C11' : np.array([]),
'd11' : np.array([]),
'H12' : np.array([]),
'f12' : np.array([]),
'lb12' : np.array([]),
'ub12' : np.array([]),
'C12' : np.array([]),
'd12' : np.array([]),
'H13' : np.array([]),
'f13' : np.array([]),
'lb13' : np.array([]),
'ub13' : np.array([]),
'C13' : np.array([]),
'd13' : np.array([]),
'H14' : np.array([]),
'f14' : np.array([]),
'lb14' : np.array([]),
'ub14' : np.array([]),
'C14' : np.array([]),
'd14' : np.array([]),
'H15' : np.array([]),
'f15' : np.array([]),
'lb15' : np.array([]),
'ub15' : np.array([]),
'C15' : np.array([]),
'd15' : np.array([]),
'H16' : np.array([]),
'f16' : np.array([]),
'lb16' : np.array([]),
'ub16' : np.array([]),
'C16' : np.array([]),
'd16' : np.array([]),
'H17' : np.array([]),
'f17' : np.array([]),
'lb17' : np.array([]),
'ub17' : np.array([]),
'C17' : np.array([]),
'd17' : np.array([]),
'H18' : np.array([]),
'f18' : np.array([]),
'lb18' : np.array([]),
'ub18' : np.array([]),
'C18' : np.array([]),
'd18' : np.array([]),
'H19' : np.array([]),
'f19' : np.array([]),
'lb19' : np.array([]),
'ub19' : np.array([]),
'C19' : np.array([]),
'd19' : np.array([]),
'H20' : np.array([]),
'f20' : np.array([]),
'lb20' : np.array([]),
'ub20' : np.array([]),
'C20' : np.array([]),
'd20' : np.array([]),
'H21' : np.array([]),
'f21' : np.array([]),
'lb21' : np.array([]),
'ub21' : np.array([]),
'd21' : np.array([]),
'z_init_00' : np.array([]),
'z_init_01' : np.array([]),
'z_init_02' : np.array([]),
'z_init_03' : np.array([]),
'z_init_04' : np.array([]),
'z_init_05' : np.array([]),
'z_init_06' : np.array([]),
'z_init_07' : np.array([]),
'z_init_08' : np.array([]),
'z_init_09' : np.array([]),
'z_init_10' : np.array([]),
'z_init_11' : np.array([]),
'z_init_12' : np.array([]),
'z_init_13' : np.array([]),
'z_init_14' : np.array([]),
'z_init_15' : np.array([]),
'z_init_16' : np.array([]),
'z_init_17' : np.array([]),
'z_init_18' : np.array([]),
'z_init_19' : np.array([]),
'z_init_20' : np.array([]),
}

class forces_outputs_ctypes(ctypes.Structure):
#	@classmethod
#	def from_param(self):
#		return self
	_fields_ = [('out1', ctypes.c_double * 8),
('out2', ctypes.c_double * 8),
('out3', ctypes.c_double * 8),
('out4', ctypes.c_double * 8),
('out5', ctypes.c_double * 8),
('out6', ctypes.c_double * 8),
('out7', ctypes.c_double * 8),
('out8', ctypes.c_double * 8),
('out9', ctypes.c_double * 8),
('out10', ctypes.c_double * 8),
('out11', ctypes.c_double * 8),
('out12', ctypes.c_double * 8),
('out13', ctypes.c_double * 8),
('out14', ctypes.c_double * 8),
('out15', ctypes.c_double * 8),
('out16', ctypes.c_double * 8),
('out17', ctypes.c_double * 8),
('out18', ctypes.c_double * 8),
('out19', ctypes.c_double * 8),
('out20', ctypes.c_double * 8),
('out21', ctypes.c_double * 6),
]

forces_outputs = {'out1' : np.array([]),
'out2' : np.array([]),
'out3' : np.array([]),
'out4' : np.array([]),
'out5' : np.array([]),
'out6' : np.array([]),
'out7' : np.array([]),
'out8' : np.array([]),
'out9' : np.array([]),
'out10' : np.array([]),
'out11' : np.array([]),
'out12' : np.array([]),
'out13' : np.array([]),
'out14' : np.array([]),
'out15' : np.array([]),
'out16' : np.array([]),
'out17' : np.array([]),
'out18' : np.array([]),
'out19' : np.array([]),
'out20' : np.array([]),
'out21' : np.array([]),
}


class forces_info(ctypes.Structure):
#	@classmethod
#	def from_param(self):
#		return self
	_fields_ = [('it', ctypes.c_int),
('it2opt', ctypes.c_int),
('res_eq', ctypes.c_double),
('res_ineq', ctypes.c_double),
('pobj',ctypes.c_double),
('dobj',ctypes.c_double),
('dgap',ctypes.c_double),
('rdgap',ctypes.c_double),
('mu',ctypes.c_double),
('mu_aff',ctypes.c_double),
('sigma',ctypes.c_double),
('lsit_aff', ctypes.c_int),
('lsit_cc', ctypes.c_int),
('step_aff',ctypes.c_double),
('step_cc',ctypes.c_double),
('solvetime',ctypes.c_double)
]

class FILE(ctypes.Structure):
        pass
if sys.version_info.major == 2:
	PyFile_AsFile = ctypes.pythonapi.PyFile_AsFile # problem here with python 3 http://stackoverflow.com/questions/16130268/python-3-replacement-for-pyfile-asfile
	PyFile_AsFile.argtypes = [ctypes.py_object]
	PyFile_AsFile.restype = ctypes.POINTER(FILE)

# determine data types for solver function prototype 
csolver.argtypes = ( ctypes.POINTER(forces_params_ctypes), ctypes.POINTER(forces_outputs_ctypes), ctypes.POINTER(forces_info), ctypes.POINTER(FILE))
csolver.restype = ctypes.c_int

def forces_solve(params_arg):
	'''
a Python wrapper for a fast solver generated by FORCES Pro

   OUTPUT = forces_py.forces_solve(PARAMS) solves a multistage problem
   subject to the parameters supplied in the following dictionary:
       PARAMS['H1'] - matrix of size [8 x 8]
       PARAMS['f1'] - column vector of length 8
       PARAMS['lb1'] - column vector of length 8
       PARAMS['ub1'] - column vector of length 8
       PARAMS['C1'] - matrix of size [6 x 8]
       PARAMS['d1'] - column vector of length 6
       PARAMS['H2'] - matrix of size [8 x 8]
       PARAMS['f2'] - column vector of length 8
       PARAMS['lb2'] - column vector of length 8
       PARAMS['ub2'] - column vector of length 8
       PARAMS['C2'] - matrix of size [6 x 8]
       PARAMS['d2'] - column vector of length 6
       PARAMS['H3'] - matrix of size [8 x 8]
       PARAMS['f3'] - column vector of length 8
       PARAMS['lb3'] - column vector of length 8
       PARAMS['ub3'] - column vector of length 8
       PARAMS['C3'] - matrix of size [6 x 8]
       PARAMS['d3'] - column vector of length 6
       PARAMS['H4'] - matrix of size [8 x 8]
       PARAMS['f4'] - column vector of length 8
       PARAMS['lb4'] - column vector of length 8
       PARAMS['ub4'] - column vector of length 8
       PARAMS['C4'] - matrix of size [6 x 8]
       PARAMS['d4'] - column vector of length 6
       PARAMS['H5'] - matrix of size [8 x 8]
       PARAMS['f5'] - column vector of length 8
       PARAMS['lb5'] - column vector of length 8
       PARAMS['ub5'] - column vector of length 8
       PARAMS['C5'] - matrix of size [6 x 8]
       PARAMS['d5'] - column vector of length 6
       PARAMS['H6'] - matrix of size [8 x 8]
       PARAMS['f6'] - column vector of length 8
       PARAMS['lb6'] - column vector of length 8
       PARAMS['ub6'] - column vector of length 8
       PARAMS['C6'] - matrix of size [6 x 8]
       PARAMS['d6'] - column vector of length 6
       PARAMS['H7'] - matrix of size [8 x 8]
       PARAMS['f7'] - column vector of length 8
       PARAMS['lb7'] - column vector of length 8
       PARAMS['ub7'] - column vector of length 8
       PARAMS['C7'] - matrix of size [6 x 8]
       PARAMS['d7'] - column vector of length 6
       PARAMS['H8'] - matrix of size [8 x 8]
       PARAMS['f8'] - column vector of length 8
       PARAMS['lb8'] - column vector of length 8
       PARAMS['ub8'] - column vector of length 8
       PARAMS['C8'] - matrix of size [6 x 8]
       PARAMS['d8'] - column vector of length 6
       PARAMS['H9'] - matrix of size [8 x 8]
       PARAMS['f9'] - column vector of length 8
       PARAMS['lb9'] - column vector of length 8
       PARAMS['ub9'] - column vector of length 8
       PARAMS['C9'] - matrix of size [6 x 8]
       PARAMS['d9'] - column vector of length 6
       PARAMS['H10'] - matrix of size [8 x 8]
       PARAMS['f10'] - column vector of length 8
       PARAMS['lb10'] - column vector of length 8
       PARAMS['ub10'] - column vector of length 8
       PARAMS['C10'] - matrix of size [6 x 8]
       PARAMS['d10'] - column vector of length 6
       PARAMS['H11'] - matrix of size [8 x 8]
       PARAMS['f11'] - column vector of length 8
       PARAMS['lb11'] - column vector of length 8
       PARAMS['ub11'] - column vector of length 8
       PARAMS['C11'] - matrix of size [6 x 8]
       PARAMS['d11'] - column vector of length 6
       PARAMS['H12'] - matrix of size [8 x 8]
       PARAMS['f12'] - column vector of length 8
       PARAMS['lb12'] - column vector of length 8
       PARAMS['ub12'] - column vector of length 8
       PARAMS['C12'] - matrix of size [6 x 8]
       PARAMS['d12'] - column vector of length 6
       PARAMS['H13'] - matrix of size [8 x 8]
       PARAMS['f13'] - column vector of length 8
       PARAMS['lb13'] - column vector of length 8
       PARAMS['ub13'] - column vector of length 8
       PARAMS['C13'] - matrix of size [6 x 8]
       PARAMS['d13'] - column vector of length 6
       PARAMS['H14'] - matrix of size [8 x 8]
       PARAMS['f14'] - column vector of length 8
       PARAMS['lb14'] - column vector of length 8
       PARAMS['ub14'] - column vector of length 8
       PARAMS['C14'] - matrix of size [6 x 8]
       PARAMS['d14'] - column vector of length 6
       PARAMS['H15'] - matrix of size [8 x 8]
       PARAMS['f15'] - column vector of length 8
       PARAMS['lb15'] - column vector of length 8
       PARAMS['ub15'] - column vector of length 8
       PARAMS['C15'] - matrix of size [6 x 8]
       PARAMS['d15'] - column vector of length 6
       PARAMS['H16'] - matrix of size [8 x 8]
       PARAMS['f16'] - column vector of length 8
       PARAMS['lb16'] - column vector of length 8
       PARAMS['ub16'] - column vector of length 8
       PARAMS['C16'] - matrix of size [6 x 8]
       PARAMS['d16'] - column vector of length 6
       PARAMS['H17'] - matrix of size [8 x 8]
       PARAMS['f17'] - column vector of length 8
       PARAMS['lb17'] - column vector of length 8
       PARAMS['ub17'] - column vector of length 8
       PARAMS['C17'] - matrix of size [6 x 8]
       PARAMS['d17'] - column vector of length 6
       PARAMS['H18'] - matrix of size [8 x 8]
       PARAMS['f18'] - column vector of length 8
       PARAMS['lb18'] - column vector of length 8
       PARAMS['ub18'] - column vector of length 8
       PARAMS['C18'] - matrix of size [6 x 8]
       PARAMS['d18'] - column vector of length 6
       PARAMS['H19'] - matrix of size [8 x 8]
       PARAMS['f19'] - column vector of length 8
       PARAMS['lb19'] - column vector of length 8
       PARAMS['ub19'] - column vector of length 8
       PARAMS['C19'] - matrix of size [6 x 8]
       PARAMS['d19'] - column vector of length 6
       PARAMS['H20'] - matrix of size [8 x 8]
       PARAMS['f20'] - column vector of length 8
       PARAMS['lb20'] - column vector of length 8
       PARAMS['ub20'] - column vector of length 8
       PARAMS['C20'] - matrix of size [6 x 8]
       PARAMS['d20'] - column vector of length 6
       PARAMS['H21'] - matrix of size [6 x 6]
       PARAMS['f21'] - column vector of length 6
       PARAMS['lb21'] - column vector of length 6
       PARAMS['ub21'] - column vector of length 6
       PARAMS['d21'] - column vector of length 6
       PARAMS['z_init_00'] - column vector of length 8
       PARAMS['z_init_01'] - column vector of length 8
       PARAMS['z_init_02'] - column vector of length 8
       PARAMS['z_init_03'] - column vector of length 8
       PARAMS['z_init_04'] - column vector of length 8
       PARAMS['z_init_05'] - column vector of length 8
       PARAMS['z_init_06'] - column vector of length 8
       PARAMS['z_init_07'] - column vector of length 8
       PARAMS['z_init_08'] - column vector of length 8
       PARAMS['z_init_09'] - column vector of length 8
       PARAMS['z_init_10'] - column vector of length 8
       PARAMS['z_init_11'] - column vector of length 8
       PARAMS['z_init_12'] - column vector of length 8
       PARAMS['z_init_13'] - column vector of length 8
       PARAMS['z_init_14'] - column vector of length 8
       PARAMS['z_init_15'] - column vector of length 8
       PARAMS['z_init_16'] - column vector of length 8
       PARAMS['z_init_17'] - column vector of length 8
       PARAMS['z_init_18'] - column vector of length 8
       PARAMS['z_init_19'] - column vector of length 8
       PARAMS['z_init_20'] - column vector of length 6

   OUTPUT returns the values of the last iteration of the solver where
       OUTPUT['out1'] - column vector of size 8
       OUTPUT['out2'] - column vector of size 8
       OUTPUT['out3'] - column vector of size 8
       OUTPUT['out4'] - column vector of size 8
       OUTPUT['out5'] - column vector of size 8
       OUTPUT['out6'] - column vector of size 8
       OUTPUT['out7'] - column vector of size 8
       OUTPUT['out8'] - column vector of size 8
       OUTPUT['out9'] - column vector of size 8
       OUTPUT['out10'] - column vector of size 8
       OUTPUT['out11'] - column vector of size 8
       OUTPUT['out12'] - column vector of size 8
       OUTPUT['out13'] - column vector of size 8
       OUTPUT['out14'] - column vector of size 8
       OUTPUT['out15'] - column vector of size 8
       OUTPUT['out16'] - column vector of size 8
       OUTPUT['out17'] - column vector of size 8
       OUTPUT['out18'] - column vector of size 8
       OUTPUT['out19'] - column vector of size 8
       OUTPUT['out20'] - column vector of size 8
       OUTPUT['out21'] - column vector of size 6

   [OUTPUT, EXITFLAG] = forces_py.forces_solve(PARAMS) returns additionally
   the integer EXITFLAG indicating the state of the solution with 
       1 - Optimal solution has been found (subject to desired accuracy)
       2 - (only branch-and-bound) A feasible point has been identified for which the objective value is no more than codeoptions.mip.mipgap*100 per cent worse than the global optimum 
       0 - Timeout - maximum number of iterations reached
      -1 - (only branch-and-bound) Infeasible problem (problems solving the root relaxation to the desired accuracy)
      -2 - (only branch-and-bound) Out of memory - cannot fit branch and bound nodes into pre-allocated memory.
      -6 - NaN or INF occured during evaluation of functions and derivatives. Please check your initial guess.
      -7 - Method could not progress. Problem may be infeasible. Run FORCESdiagnostics on your problem to check for most common errors in the formulation.
     -10 - The convex solver could not proceed due to an internal error
    -100 - License error

   [OUTPUT, EXITFLAG, INFO] = forces_py.forces_solve(PARAMS) returns 
   additional information about the last iterate:
       INFO.it        - number of iterations that lead to this result
       INFO.it2opt    - number of convex solves
       INFO.res_eq    - max. equality constraint residual
       INFO.res_ineq  - max. inequality constraint residual
       INFO.pobj      - primal objective
       INFO.dobj      - dual objective
       INFO.dgap      - duality gap := pobj - dobj
       INFO.rdgap     - relative duality gap := |dgap / pobj|
       INFO.mu        - duality measure
       INFO.sigma     - centering parameter
       INFO.lsit_aff  - iterations of affine line search
       INFO.lsit_cc   - iterations of line search (combined direction)
       INFO.step_aff  - step size (affine direction)
       INFO.step_cc   - step size (centering direction)
       INFO.solvetime - Time needed for solve (wall clock time)

 See also COPYING

	'''
	global _lib

	# convert parameters
	params_py = forces_params_ctypes()
	for par in params_arg:
		try:
			#setattr(params_py, par, npct.as_ctypes(np.reshape(params_arg[par],np.size(params_arg[par]),order='A'))) 
			params_arg[par] = np.require(params_arg[par], dtype=np.float64, requirements='F')
			setattr(params_py, par, npct.as_ctypes(np.reshape(params_arg[par],np.size(params_arg[par]),order='F')))  
		except:
			raise ValueError('Parameter ' + par + ' does not have the appropriate dimensions or data type. Please use numpy arrays for parameters.')
    
	outputs_py = forces_outputs_ctypes()
	info_py = forces_info()
	if sys.version_info.major == 2:
		if sys.platform.startswith('win'):
			fp = None # if set to none, the solver prints to stdout by default - necessary because we have an access violation otherwise under windows
		else:
			#fp = open('stdout_temp.txt','w')
			fp = sys.stdout
		try:
			PyFile_AsFile.restype = ctypes.POINTER(FILE)
			exitflag = _lib.forces_solve( params_py, ctypes.byref(outputs_py), ctypes.byref(info_py), PyFile_AsFile(fp) )
			#fp = open('stdout_temp.txt','r')
			#print (fp.read())
			#fp.close()
		except:
			#print 'Problem with solver'
			raise
	elif sys.version_info.major == 3:
		if sys.platform.startswith('win'):
			libc = ctypes.cdll.msvcrt
		elif sys.platform.startswith('darwin'):
			libc = ctypes.CDLL('libc.dylib')
		else:
			libc = ctypes.CDLL('libc.so.6')       # Open libc
		cfopen = getattr(libc,'fopen')        # Get its fopen
		cfopen.restype = ctypes.POINTER(FILE) # Yes, fopen gives a file pointer
		cfopen.argtypes = [ctypes.c_char_p, ctypes.c_char_p] # Yes, fopen gives a file pointer 
		fp = cfopen('stdout_temp.txt'.encode('utf-8'),'w'.encode('utf-8'))    # Use that fopen 

		try:
			if sys.platform.startswith('win'):
				exitflag = _lib.forces_solve( params_py, ctypes.byref(outputs_py), ctypes.byref(info_py), None )
			else:
				exitflag = _lib.forces_solve( params_py, ctypes.byref(outputs_py), ctypes.byref(info_py), fp )
			libc.fclose(fp)
			fptemp = open('stdout_temp.txt','r')
			print (fptemp.read())
			fptemp.close()			
		except:
			#print 'Problem with solver'
			raise

	# convert outputs
	for out in forces_outputs:
		forces_outputs[out] = npct.as_array(getattr(outputs_py,out))

	return forces_outputs,int(exitflag),info_py

solve = forces_solve


